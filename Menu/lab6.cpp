struct block {
	int x;
	int y;
};

#include"lab6.h"

int map[32] = {
	0b1111'1111'1111'0111'1111'1111'1111'1111,//0
	0b1111'1111'1111'0111'1111'1111'1111'1111,//1
	0b1111'1111'1111'0111'1111'1111'1111'1111,//2
	0b1111'1111'1111'0111'1111'1111'1111'1111,//3
	0b1111'1111'1111'0111'1111'1111'1111'1111,//4
	0b1111'1111'1111'0111'1111'1111'1111'1111,//5
	0b1111'1111'1111'0111'1111'1111'1111'1111,//6
	0b1111'1110'1111'0001'1111'1111'1111'1111,//7
	0b1111'1110'1111'1101'1111'1111'1111'1111,//8
	0b1111'1110'1110'0001'1111'1111'1111'1111,//9
	0b1111'1110'0000'1111'1111'1111'1111'1111,//10
	0b1111'1110'1111'1111'1111'1111'1111'1111,//11
	0b1111'1100'1111'1111'1111'1111'1111'1111,//12
	0b1111'1101'1111'1111'1111'1111'1111'1111,//13
	0b0000'0000'0000'0000'0000'0000'0000'0001,//14
	0b1111'1111'1011'1111'1111'1111'1111'1111,//15
	0b1111'1111'1011'1111'1111'1111'1111'1111,//16
	0b1111'1111'1011'1111'1111'1111'1111'1111,//17
	0b1111'1111'1011'1111'1111'1111'1111'1111,//18
	0b1111'1111'1000'0000'1111'1111'1111'1111,//19
	0b1111'1111'1011'1111'1111'1111'1111'1111,//20
	0b1111'1111'1000'0000'0000'1111'1111'1111,//21
	0b1111'1111'1111'1111'1111'1111'1111'1111,//22
	0b1111'1111'1111'1111'1111'1111'1111'1111,//23
	0b1111'1111'1111'1111'1111'1111'1111'1111,//24
	0b1111'1111'1111'1111'1111'1111'1111'1111,//25
	0b1111'1111'1111'1111'1111'1111'1111'1111,//26
	0b1111'1111'1111'1111'1111'1111'1111'1111,//27
	0b1111'1111'1111'1111'1111'1111'1111'1111,//28
	0b1111'1111'1111'1111'1111'1111'1111'1111,//29
	0b1111'1111'1111'1111'1111'1111'1111'1111,//30
	0b1111'1111'1111'1111'1111'1111'1111'1111//31
};



int c, curs, col_ways = 1, i = 0;
int nx, ny;
int nbx = 12, nby = 0, nex = 0, ney = 14;
unsigned int Bit = 0b1000'0000'0000'0000'0000'0000'0000'0000;	


void lab6() {
	system("cls");
	for (ny = 0; ny < 32; ny++) {
		for (nx = 0; nx < 32; nx++) {
			if ((Bit >> nx) & map[ny]) {
				SetColor(7, 7);
				cout << "WW";
			}	
			else{
				col_ways++;
				SetColor(0, 15);
				cout << "  ";
			}
			 
			
		}
		cout << endl;
	}
	block* visited = new block[col_ways];
	nx = nbx; ny = nby;
	do {
		move(nx, ny);
		c = _getch();
		if (c == 224) {
			curs = _getch();
			switch (curs) {
			case 72:
				ny -= 1;
				break;
			case 80:
				ny += 1;
				break;
			case 75:
				nx -= 1;
				break;
			case 77:
				nx += 1;
				break;
			}
			if (nx != nex && ny != ney) check_wall(nx, ny, map, curs);
		}
		else {
			switch (c) {
			case 119:
				ny -= 1; break;
			case 115:
				ny += 1; break;
			case 97:
				nx -= 1; break;
			case 100:
				nx += 1; break;

			default:
				Beep(400, 50);
			}
			if (nx != nex && ny != ney) check_wall(nx, ny, map, c);
		}
	} while (c != 27 && !end(nx, ny, nex, ney));
	SetColor(0, 15);
	system("cls");
	int i = 0;
	cout << find_way(nx, ny, visited, map, col_ways, i);

}