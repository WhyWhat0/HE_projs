#include <conio.h>
#include<stdio.h>
#include <iostream>
#include <iomanip>
#include <math.h>
#include<windows.h>
#include<tuple>
#include <fstream>

using namespace std;

int map[33] = {
	0b1111'1111'1111'1111'1111'1111'1111'1111,
	0b1111'1111'1111'0111'1111'1111'1111'1111,
	0b1111'1111'1111'0111'1111'1111'1111'1111,
	0b1111'1111'1111'0111'1111'1111'1111'1111,
	0b1111'1111'1111'0111'1111'1111'1111'1111,
	0b1111'1111'1111'0111'1111'1111'1111'1111,
	0b1111'1111'1111'0111'1111'1111'1111'1111,
	0b1111'1111'1111'0111'1111'1111'1111'1111,
	0b1111'1110'1111'0001'1111'1111'1111'1111,
	0b1111'1110'1111'1101'1111'1111'1111'1111,
	0b1111'1110'1110'0001'1111'1111'1111'1111,
	0b1111'1110'0000'1111'1111'1111'1111'1111,
	0b1111'1110'1111'1111'1111'1111'1111'1111,
	0b1111'1100'1111'1111'1111'1111'1111'1111,
	0b1111'1101'1111'1111'1111'1111'1111'1111,
	0b1111'1100'0000'0000'0000'0000'0000'0000,
	0b1111'1111'1011'1111'1111'1111'1111'1111,
	0b1111'1111'1011'1111'1111'1111'1111'1111,
	0b1111'1111'1011'1111'1111'1111'1111'1111,
	0b1111'1111'1011'1111'1111'1111'1111'1111,
	0b1111'1111'1000'0000'1111'1111'1111'1111,
	0b1111'1111'1011'1111'1111'1111'1111'1111,
	0b1111'1111'1000'0000'0000'1111'1111'1111,
	0b1111'1111'1111'1111'1111'1111'1111'1111,
	0b1111'1111'1111'1111'1111'1111'1111'1111,
	0b1111'1111'1111'1111'1111'1111'1111'1111,
	0b1111'1111'1111'1111'1111'1111'1111'1111,
	0b1111'1111'1111'1111'1111'1111'1111'1111,
	0b1111'1111'1111'1111'1111'1111'1111'1111,
	0b1111'1111'1111'1111'1111'1111'1111'1111,
	0b1111'1111'1111'1111'1111'1111'1111'1111,
	0b1111'1111'1111'1111'1111'1111'1111'1111,
	0b1111'1111'1111'1111'1111'1111'1111'1111
};
int c, curs, col_ways = 0, i = 0;
int nx, ny;
int nbx =  12, nby = 1, nex = 12, ney = 15;
unsigned int Bit = 0b1000'0000'0000'0000'0000'0000'0000'0000;

int find_way(int nx, int ny) {
	cout << !((Bit >> nx + 1) & map[ny]) << !((Bit >> nx - 1) & map[ny]) << !((Bit >> nx) & map[ny+1]) << !((Bit >> nx) & map[ny-1]) << endl;
	if (nx == nex && ny == ney) {
		return 1;
	}
	if (!((Bit >> nx + 1) & map[ny])) {
		return find_way(nx + 1, ny);
	}
	if (!((Bit >> nx - 1) & map[ny])) {
		return find_way(nx - 1, ny);
	}
	if (!((Bit >> nx) & map[ny + 1])) {
		return find_way(nx, ny + 1);
	}
	if (!((Bit >> nx) & map[ny - 1])) {
		return find_way(nx, ny - 1);
	}
	return 0;
}
int main()
{
	cout << find_way(nbx, nby);
    return 0;
}